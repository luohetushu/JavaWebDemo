打开路径配置文件：touch .bash_profile
               open -e .bash_profile
修改关闭之后，刷新：source .bash_profile

查看端口使用情况：sudo lsof -i tcp: 端口号
    如： murongyunge$ sudo lsof -i tcp:1099
        Password:
        COMMAND  PID        USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
        java    9734 murongyunge   20u  IPv6 0x857b4bb95d00ec4b      0t0  TCP *:rmiregistry (LISTEN)
关闭某个进程对端口号的使用：sudo kill -9 PID（进程ID）
    如：sudo kill -9 9734


web 应用，本地 server：Tomcat
先部署 Deployment：File --> Project Structure ，然后命名
后添加 Tomcat server：Run --> Edit Configurations, 设置 URL 与端口号
                             此时，Tomcat文件, /conf/web.xml 是所有 Java Web 项目中 web.xml 的父文件
Servlet.java 文件挂载在 Tomcat 服务器下：在 web.xml 中配置 <servlet>...</servlet> 与 <servlet-mapping>...</servlet-mapping>
.jsp 引用外部 .js 文件，需要单独写一行：<script type="text/javascript" src="<%= basePath %>ajax-lib/ajax_utils.js"></script>
     同时，在 web.xml 中配置，<servlet-mapping>
                              <servlet-name>default</servlet-name>
                              <url-pattern>/ajax-lib/ajax_utils.js</url-pattern>
                            </servlet-mapping>

.jsp <script type="text/javascript">...</script>  //之中对那些标签，如<p>、<h>、<input>等，的获取，
     使用 org.w3c.dom.Document 的对象 document

XStream：将 JavaBean 对象转换成（序列化）为 XML 字符串
     jar 包：xstream-1.4.12.jar  必须依赖包：xpp3_min-1.1.4c.jar
     使用步骤：1、获取 XStream 对象：XStream xStream = new XStream();
             2、转化成 XML：String xml = xStream.toXML( JavaBean 对象 JavaBean 对象 List 集合);
             3、设置别名：比如：xStream.alias("根标签名", List.class);
                              xStream.alias("子标签名", JavaBean.class);
             4、将 JavaBean 类中的指定成员属性设置为标签属性
                xStream.useAttributeFor(JavaBean.class, "成员属性名");
             5、去除 JavaBean 类中的某些成员属性，防止生成标签
                xStream.addImpliciteCollection(JavaBean.class, "成员属性名");  // 去除的集合类成员属性
             6、防止子标签对应的 JavaBean 类中的某些属性生成标签
                xStream.omitField(JavaBean.class, "成员属性名");  //基本类成员属性

***********将 JavaBean 对象转换成（序列化）为 Json 字符串**************
todo commons-beanutils.jar(对 javaBean 对象的操作)
todo java.awt.* JFrame

json：js 提供的一种数据交互
    语法：var json = {"属性名1": 属性值1, "属性名2": 属性值2, "属性名3": 属性值3, ...}
         {} 为对象；属性名只能由双引号包含
         属性值：null、基本数据类型、字符串、数组[]
         获取数据：var 属性值1 = json.属性名1;
    在 .jsp 文件的 <script> 中：var json = {"name": "Drive", "job": "Kamen Rider", "age": 27, "friends":["Mach", "Chase"]};
     如果是 string 类型，需转义：var strJson = "{\"name\": \"Drive\", \"job\": \"Kamen Rider\", \"age\": 27, \"friends\":[\"Mach\", \"Chase\"]}";
                              var json1 = eval("(" + strJson + ")");  //字符串转 json
     eval("(" + 字符串数据 + ")");  // eval 方法可以将字符串数据转化成字符串包含的原有数据的数据类型

Ajax：Asynchronous Javascript and XML ：异步交互的 js 和 xml
    使用 js 异步访问服务器，服务器只需响应部分内容，无需响应整个页面
    异步请求步骤：1、获取 XMLHttpRequest 对象，同时创建 onreadystatechange 状态改变监听事件
                   大部分浏览器支持：var xmlHttp = new XMLHttpRequest();
                   IE6.0：var xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
                   IE5.5 及以下版本：var xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
                2、打开与服务器的连接：xmlHttp.open(参数一, 参数二, 参数三);
                                    参数一：请求方式，GET 或 POST
                                    参数二：请求 URL，指定服务器端资源
                                    参数三：请求是否异步，true 为异步请求，false 为同步请求
                   xmlHttp.open("GET", "https://www.baidu.com/s?wd=%E5%89%91%E6%9D%A5", true)
                   如果是 POST 请求方式，需要设置请求头：
                       xmlHttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                3、发送请求：xmlHttp.send(参数);
                           参数：请求内容，如果是 GET 方式，则设置为 null，  // 传 null 是防止部分服务器无法发送
                                         如果是 POST 方式，则设置为具体请求参数，如"参数名=参数值&参数名2=参数值2"
                4、接收服务器响应：根据 onreadystatechange 状态改变监听事件调用情况判断
                   XMLHttpRequest 对象状态：0：只是创建 XMLHttpRequest 对象，还未调用 open() 方法
                                           1：请求已开始，已调用 open() 方法，但还未调用 send() 方法
                                           2：请求发送完成状态，已调用 send() 方法
                                           3：开始读取服务器响应
                                           4：读取服务器响应结束
                                  onreadystatechange 状态改变监听事件会在1、2、3、4时引发
                                  xmlHttp.onreadystatechange = function(){
                                      if(xmlHttp.readyState == 4 && xmlHttp.status == 200){
                                          //获取服务器响应内容 ....
                                      }
                                  };
                   获取 XMLHttpRequest 对象状态：var state = xmlHttp.readyState;  //值可能为0、1、2、3、4
                   获取服务器响应状态码：var status = xmlHttp.status;  //如：200、404、500
                   获取服务器响应内容：var text = xmlHttp.responseText;  //服务器响应的文本格式内容
                                    var document = xmlHttp.responseXML; //服务器响应的 XML 内容，自动解析为 document 对象
                                          注：需要设置响应格式与编码：resp.setContentType("text/xml; charset=utf-8");






